{
    "manifests": {
        "ambient-link/ability-sdk": {
            "manifest": {
                "env": {
                    "AMBIENT_LINK_HOST": "",
                    "AMBIENT_LINK_PORT": "1883",
                    "AMBIENT_LINK_USERNAME": "",
                    "AMBIENT_LINK_PASSWORD": "",
                    "AMBIENT_LINK_MONKEY_ID": ""
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/"
                },
                "post-install-output": [
                    "  * Your ability is almost ready:",
                    "    1. Edit <comment>src/AbilityEventSubscriber</comment> and <info>implement</info> your logic:",
                    "",
                    "        public static function getSubscribedEvents(): array",
                    "        {",
                    "            return [",
                    "                // can be found in AmbientLink\\SDK\\Event\\",
                    "                EnterRoomEvent::NAME => 'onEnterRoom',",
                    "            ];",
                    "        }",
                    "",
                    "        public function onEnterRoom(EnterRoomEvent $event): void",
                    "        {",
                    "            $roomName = $event->roomName();",
                    "",
                    "            $this->logger->debug(sprintf('Some person enters room \"%s\".', $roomName));",
                    "",
                    "            // @todo implement logic here",
                    "        }",
                    "",
                    "  * You can found Events in AmbientLink\\SDK\\Event\\",
                    "  * Using Ability Command? Try <info>php bin/console ability:debug --dummy</info>"
                ]
            },
            "files": {
                "config/packages/ability.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "use function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\service;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $services = $containerConfigurator->services();",
                        "",
                        "    $services->set('AmbientLink\\SDK\\SmartMonkeyConnection')",
                        "        ->args([",
                        "            service('amnient.link_connection_settings'),",
                        "            '%env(AMBIENT_LINK_USERNAME)%',",
                        "            '%env(AMBIENT_LINK_PASSWORD)%',",
                        "        ]);",
                        "",
                        "    $services->set('amnient.link_connection_settings', 'PhpMqtt\\Client\\ConnectionSettings');",
                        "",
                        "    $services->alias('PhpMqtt\\Client\\Contracts\\MQTTClient', 'PhpMqtt\\Client\\MQTTClient');",
                        "",
                        "    $services->set('PhpMqtt\\Client\\MQTTClient')",
                        "        ->args([",
                        "            '%env(AMBIENT_LINK_HOST)%',",
                        "            '%env(AMBIENT_LINK_PORT)%',",
                        "            '%env(AMBIENT_LINK_MONKEY_ID)%',",
                        "        ]);",
                        "",
                        "    $services->set('AmbientLink\\SDK\\Mqtt\\MqttAdapter')",
                        "        ->arg('$username', '%env(AMBIENT_LINK_USERNAME)%')",
                        "        ->arg('$password', '%env(AMBIENT_LINK_PASSWORD)%');",
                        "};",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "477cf8be8fe418797aab66ae191d1f40149620c0"
        }
    }
}
