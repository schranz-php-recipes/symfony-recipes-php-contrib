{
    "manifests": {
        "patchlevel/event-sourcing-bundle": {
            "manifest": {
                "bundles": {
                    "Patchlevel\\EventSourcingBundle\\PatchlevelEventSourcingBundle": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/"
                },
                "env": {
                    "#1": "Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url",
                    "#3": "",
                    "#4": "EVENTSTORE_URL=\"pdo-sqlite:///%kernel.project_dir%/var/data.db\"",
                    "#5": "EVENTSTORE_URL=\"pdo-mysql://app:!ChangeMe!@127.0.0.1:3306/app?serverVersion=8.2\"",
                    "EVENTSTORE_URL": "pdo-pgsql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=16&charset=utf8"
                },
                "dockerfile": [
                    "RUN install-php-extensions pdo_pgsql"
                ],
                "docker-compose": {
                    "docker-compose.yml": {
                        "services": [
                            "database:",
                            "  image: postgres:${POSTGRES_VERSION:-16}-alpine",
                            "  environment:",
                            "    POSTGRES_DB: ${POSTGRES_DB:-app}",
                            "    # You should definitely change the password in production",
                            "    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}",
                            "    POSTGRES_USER: ${POSTGRES_USER:-app}",
                            "  volumes:",
                            "    - database_data:/var/lib/postgresql/data:rw",
                            "    # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!",
                            "    # - ./docker/db/data:/var/lib/postgresql/data:rw"
                        ],
                        "volumes": [
                            "database_data:"
                        ]
                    },
                    "docker-compose.override.yml": {
                        "services": [
                            "database:",
                            "  ports:",
                            "    - \"5432\""
                        ]
                    }
                },
                "post-install-output": [
                    "  * Modify your EVENTSTORE_URL config in <fg=green>.env</>"
                ]
            },
            "files": {
                "config/packages/patchlevel_event_sourcing.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;",
                        "",
                        "return static function (ContainerConfigurator $containerConfigurator): void {",
                        "    $containerConfigurator->extension('patchlevel_event_sourcing', [",
                        "        'aggregates' => '%kernel.project_dir%/src',",
                        "        'events' => '%kernel.project_dir%/src',",
                        "        'connection' => [",
                        "            'url' => '%env(EVENTSTORE_URL)%',",
                        "        ],",
                        "    ]);",
                        "    if ($containerConfigurator->env() === 'dev') {",
                        "        $containerConfigurator->extension('patchlevel_event_sourcing', [",
                        "            'subscription' => [",
                        "                'catch_up' => true,",
                        "                'throw_on_error' => true,",
                        "                'run_after_aggregate_save' => true,",
                        "                'rebuild_after_file_change' => true,",
                        "                'auto_setup' => true,",
                        "            ],",
                        "        ]);",
                        "    }",
                        "    if ($containerConfigurator->env() === 'test') {",
                        "        $containerConfigurator->extension('patchlevel_event_sourcing', [",
                        "            'subscription' => [",
                        "                'catch_up' => true,",
                        "                'throw_on_error' => true,",
                        "                'run_after_aggregate_save' => true,",
                        "            ],",
                        "        ]);",
                        "    }",
                        "};",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "025c856258fa6a49cb2765de46689fa4ccf33577"
        }
    }
}
